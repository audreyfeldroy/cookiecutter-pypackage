'# Use the latest 2.1 version of CircleCI pipeline process engine.\n# See: https://circleci.com/docs/2.0/configuration-reference\nversion: 2.1\n\n# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.\n# See: https://circleci.com/docs/2.0/orb-intro/\norbs:\n  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files\n  # Orb commands and jobs help you with common scripting around a language/tool\n  # so you dont have to copy and paste it everywhere.\n  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python\n  python: circleci/python@1.2\n\n\nexecutors:\n  python-docker: # declares a reusable executor\n    parameters:\n      version:\n        description: "version tag"\n        default: "latest"\n        type: string\n    docker:\n      - image: cimg/python:<<parameters.version>>\n\n# Define a job to be invoked later in a workflow.\n# See: https://circleci.com/docs/2.0/configuration-reference/#jobs\njobs:\n  build_and_test:\n    parameters:\n      version:\n        description: "version tag"\n        default: "latest"\n        type: string\n    executor:\n      name: python-docker\n      version: <<parameters.version>>\n\n    steps:\n      - checkout\n    #   - run:\n    #       name: Install System Dependencies\n    #       command: sudo apt-get update && sudo apt-get install -y libsndfile1\n      - python/install-packages:\n          pkg-manager: pip\n          # app-dir: ~/project/package-directory/  # If you\'re requirements.txt isn\'t in the root directory.\n          pip-dependency-file: requirements_dev.txt\n      - run:\n          name: Run tests\n          command: pytest\n\n  ruff:\n    parameters:\n      version:\n        description: "version tag"\n        default: "latest"\n        type: string\n    executor:\n      name: python-docker\n      version: <<parameters.version>>\n\n    steps:\n      - checkout\n      - python/install-packages:\n          pkg-manager: pip\n          # app-dir: ~/project/package-directory/  # If you\'re requirements.txt isn\'t in the root directory.\n          pip-dependency-file: requirements_dev.txt\n      - run:\n          name: Ruff\n          command: ruff check\n\n\n  test_documentation_build:\n    parameters:\n      version:\n        description: "version tag"\n        default: "latest"\n        type: string\n    executor:\n      name: python-docker\n      version: <<parameters.version>>\n\n    steps:\n      - checkout\n   #    - run:\n   #        name: Install System Dependencies\n   #        command: sudo apt-get update && sudo apt-get install -y libsndfile1 texlive-latex-extra dvipng\n      - python/install-packages:\n          pkg-manager: pip\n          # app-dir: ~/project/package-directory/  # If you\'re requirements.txt isn\'t in the root directory.\n          pip-dependency-file: requirements_dev.txt\n      - run:\n          name: Sphinx\n          command: |\n            pip install -e .\n            cd docs/\n            make html SPHINXOPTS="-W"\n\n  test_deprecation_warnings:\n    parameters:\n      version:\n        description: "version tag"\n        default: "latest"\n        type: string\n    executor:\n      name: python-docker\n      version: <<parameters.version>>\n\n    steps:\n      - checkout\n   #    - run:\n   #        name: Install System Dependencies\n   #        command: sudo apt-get update && sudo apt-get install -y libsndfile1 texlive-latex-extra dvipng\n      - python/install-packages:\n          pkg-manager: pip\n          # app-dir: ~/project/package-directory/  # If you\'re requirements.txt isn\'t in the root directory.\n          pip-dependency-file: requirements_dev.txt\n      - run:\n          name: Run tests\n          command: pytest tests -W error::DeprecationWarning\n\n  test_pypi_publish:\n    parameters:\n      version:\n        description: "version tag"\n        default: "latest"\n        type: string\n    executor:\n      name: python-docker\n      version: <<parameters.version>>\n\n    steps:\n      - checkout\n    #   - run:\n    #       name: Install System Dependencies\n    #       command: sudo apt-get update && sudo apt-get install -y libsndfile1\n      - python/install-packages:\n          pkg-manager: pip\n          # app-dir: ~/project/package-directory/  # If you\'re requirements.txt isn\'t in the root directory.\n          pip-dependency-file: requirements_dev.txt\n      - run:\n          name: deploy\n          command: |  # create whl, install twine and publish to Test PyPI\n            python setup.py sdist bdist_wheel\n            twine upload dist/*\n\n# Invoke jobs via workflows\n# See: https://circleci.com/docs/2.0/configuration-reference/#workflows\nworkflows:\n  test: # Test workflow\n    jobs:\n      # Run tests for all python versions\n      - build_and_test:\n          matrix:\n            parameters:\n              version:\n                - "3.8"\n                - "3.9"\n                - "3.10"\n                - "3.11"\n                - "3.12"\n\n      - ruff:\n          matrix:\n            parameters:\n              version:\n                - "3.12"\n          requires:\n            - build_and_test\n\n      - test_documentation_build:\n          matrix:\n            parameters:\n              version:\n                - "3.12"\n          requires:\n            - build_and_test\n\n      - test_deprecation_warnings:\n          matrix:\n            parameters:\n              version:\n                - "latest"\n          requires:\n            - build_and_test\n\n\n  test_and_publish:\n    # Test and publish on new git version tags\n    # This requires its own workflow to successfully trigger the test and build\n    jobs:\n      - build_and_test:\n          matrix:\n            parameters:\n              version:\n                - "3.8"\n                - "3.9"\n                - "3.10"\n                - "3.11"\n                - "3.12"\n\n          filters:\n            branches:\n              ignore: /.*/\n            # only act on version tags\n            tags:\n              only: /^v[0-9]+(\\.[0-9]+)*$/\n\n      - ruff:\n          matrix:\n            parameters:\n              version:\n                - "3.12"\n          requires:\n            - build_and_test\n          filters:\n            branches:\n              ignore: /.*/\n            # only act on version tags\n            tags:\n              only: /^v[0-9]+(\\.[0-9]+)*$/\n\n      - test_documentation_build:\n          matrix:\n            parameters:\n              version:\n                - "3.12"\n          requires:\n            - build_and_test\n          filters:\n            branches:\n              ignore: /.*/\n            # only act on version tags\n            tags:\n              only: /^v[0-9]+(\\.[0-9]+)*$/\n\n      - test_deprecation_warnings:\n          matrix:\n            parameters:\n              version:\n                - "latest"\n          requires:\n            - build_and_test\n          filters:\n            branches:\n              ignore: /.*/\n            # only act on version tags\n            tags:\n              only: /^v[0-9]+(\\.[0-9]+)*$/\n\n      - test_pypi_publish:\n          matrix:\n            parameters:\n              version:\n                - "3.12"\n          requires:\n            - build_and_test\n            - ruff\n            - test_documentation_build\n          filters:\n            branches:\n              ignore: /.*/\n            # only act on version tags\n            tags:\n              only: /^v[0-9]+(\\.[0-9]+)*$/\n'
