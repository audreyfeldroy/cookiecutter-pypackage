{% set license_classifiers = {
    "MIT license": "License :: OSI Approved :: MIT License",
    "BSD license": "License :: OSI Approved :: BSD License",
    "ISC license": "License :: OSI Approved :: ISC License (ISCL)",
    "Apache Software License 2.0": "License :: OSI Approved :: Apache Software License",
    "GNU General Public License v3": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
} -%}

[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.rst"
{% if cookiecutter.open_source_license in license_classifiers -%}
license = {text = "{{ cookiecutter.open_source_license }}"}
{%- endif %}
requires-python = ">=3.6"
authors = [
    { name = "{{ cookiecutter.full_name.replace("\"", "\\\"") }}", email = "{{ cookiecutter.email }}" },
]
keywords = ["{{ cookiecutter.project_slug }}"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    {% if cookiecutter.open_source_license in license_classifiers -%}
        "{{ license_classifiers[cookiecutter.open_source_license] }}",
    {%- endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
]

[project.urls]
Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"

{% if "no" not in cookiecutter.command_line_interface|lower -%}
[project.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.project_slug }}.cli:main"
{%- endif %}

dependencies = [
    {%- if cookiecutter.command_line_interface|lower == 'click' -%}
    "Click>=7.0",
    {%- endif %}
]

[project.optional-dependencies]
dev = [
    "pip==19.2.3",
    "bumpmyversion==0.6",
    "wheel==0.33.6",
    "watchdog==0.9.0",
    "flake8==3.7.8",
    "tox==3.14.0",
    "coverage==4.5.4",
    "Sphinx==1.8.5",
    "twine==1.14.0",
    {% if cookiecutter.command_line_interface|lower == 'click' -%}
    "Click==7.1.2",
    {%- endif %}
    {% if cookiecutter.use_pytest == 'y' -%}
    "pytest==6.2.4",
    {%- endif %}
    {% if cookiecutter.use_black == 'y' -%}
    "black==21.7b0"
    {-% endif %}
]


[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"


[tool.setuptools]
package-data = [
    {{ cookiecutter.project_slug }} = ["py.typed"]
]


{% if cookiecutter.use_pytest == 'y' %-}
[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.13
    env_list = py312
    envlist = py36, py37, py38, flake8

    [travis]
    python =
        3.8: py38
        3.7: py37
        3.6: py36

    [testenv]
    description = run unit tests
    deps =
        pytest>=3
        pytest-sugar
    commands =
        pytest {posargs:tests}

    [testenv]
    setenv =
        PYTHONPATH = {toxinidir}
    {% if cookiecutter.use_pytest == 'y' -%}
    deps =
        -r{toxinidir}/requirements_dev.txt
    ; If you want to make tox run the tests with the same versions, create a
    ; requirements.txt with the pinned versions and uncomment the following line:
    ;     -r{toxinidir}/requirements.txt
    commands =
        pip install -U pip
        pytest --basetemp={envtmpdir}
    {% else %}
    commands = python setup.py test
    {%- endif %}

    [testenv:flake8]
    basepython = python
    deps = flake8
    commands = flake8 {{ cookiecutter.project_slug }} tests

"""
{%- endif %}


[tool.bumpversion]
current_version = "{{ cookiecutter.version }}"
commit = True
tag = True

[[tool.bumpversion.files]]
filename = "setup.py"
search = "version='{current_version}'"
replace = "version='{new_version}'"

[[tool.bumpversion:files]]
filename = "{{ cookiecutter.project_slug }}/__init__.py"
search = "__version__ = '{current_version}'"
replace = "__version__ = '{new_version}'"


{% if cookiecutter.use_pytest == 'y' -%}
[tool.pytest.ini_options]
addopts = "--ignore=setup.py"
testpaths = ["tests"]
{%- endif %}
