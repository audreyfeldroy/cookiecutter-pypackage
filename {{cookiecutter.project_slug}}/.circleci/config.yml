# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2


executors:
  python-docker: # declares a reusable executor
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    docker:
      - image: cimg/python:<<parameters.version>>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build_and_test:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>
    steps:
      - checkout
      {% if cookiecutter.install_libsndfile1 == 'y' -%}
      - run:
          name: Install System Dependencies
          command: sudo apt-get update && sudo apt-get install -y libsndfile1
{%- endif %}
      - run:
          name: install dependencies
          command: pip install ".[tests]"
      - run:
          name: Run tests
          command: pytest

  ruff:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>
    steps:
      - checkout
      - run:
          name: install dependencies
          command: pip install ".[tests]"
      - run:
          name: Ruff
          command: ruff check

  test_documentation_build:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>
    steps:
      - checkout
      {% if cookiecutter.install_libsndfile1 == 'y' -%}
      - run:
          name: Install System Dependencies
          command: sudo apt-get update && sudo apt-get install -y libsndfile1 texlive-latex-extra dvipng
{%- endif %}
      - run:
          name: Sphinx
          command: |
            pip install ".[docs]"
            cd docs/
            make html SPHINXOPTS="-W"

  test_deprecation_warnings:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>
    steps:
      - checkout
      {% if cookiecutter.install_libsndfile1 == 'y' -%}
      - run:
          name: Install System Dependencies
          command: sudo apt-get update && sudo apt-get install -y libsndfile1 texlive-latex-extra dvipng
{%- endif %}
      - run:
          name: install dependencies
          command: pip install ".[tests]"
      - run: |
          python --version
      - run:
          name: Run tests
          command: pytest tests -W error::DeprecationWarning

  test_pypi_publish:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>
    steps:
      - checkout
      {% if cookiecutter.install_libsndfile1 == 'y' -%}
      - run:
          name: Install System Dependencies
          command: sudo apt-get update && sudo apt-get install -y libsndfile1
{%- endif %}
      - run:
          name: install dependencies
          command: pip install ".[deploy]"
      - run:
          name: deploy
          command: |  # create whl, install twine and publish to Test PyPI
            python -m build
            twine check dist/*

  run_pypi_publish:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>
    steps:
      - checkout
      {% if cookiecutter.install_libsndfile1 == 'y' -%}
      - run:
          name: Install System Dependencies
          command: sudo apt-get update && sudo apt-get install -y libsndfile1
{%- endif %}
      - run:
          name: install dependencies
          command: pip install ".[deploy]"
      - run:
          name: deploy
          command: |  # create whl, install twine and publish to Test PyPI
            python -m build
            twine check dist/*
            twine upload dist/*

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test: # Test workflow
    jobs:
      # Run tests for all python versions
      - build_and_test:
          matrix:
            parameters:
              version:
                {% for extension, details in cookiecutter._valid_versions|dictsort %}{% if extension == cookiecutter.minimum_python_version -%}{% for app in details.version_list -%}
                - "{{ app }}"
                {% endfor -%}{% endif %}{% endfor %}
      - ruff:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test

      - test_documentation_build:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test

      - test_deprecation_warnings:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test

      - test_pypi_publish:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test

  {% if cookiecutter.use_pypi_deployment_with_ci == 'y' -%}
  test_and_publish:
    # Test and publish on new git version tags
    # This requires its own workflow to successfully trigger the test and build
    jobs:
      - build_and_test:
          matrix:
            parameters:
              version:
                {% for extension, details in cookiecutter._valid_versions|dictsort %}{% if extension == cookiecutter.minimum_python_version -%}{% for app in details.version_list -%}
                - "{{ app }}"
                {% endfor -%}{% endif %}{% endfor %}
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - ruff:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - test_documentation_build:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - test_deprecation_warnings:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - run_pypi_publish:
          matrix:
            parameters:
              version:
                - "{{ cookiecutter.default_python_version }}"
          requires:
            - build_and_test
            - ruff
            - test_documentation_build
            - test_deprecation_warnings
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
  {%- endif %}
