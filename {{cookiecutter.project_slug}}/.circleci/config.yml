# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2


executors:
  python-docker: # declares a reusable executor
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    docker:
      - image: cimg/python:<<parameters.version>>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build_and_test:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>

    steps:
      - checkout
    #   - run:
    #       name: Install System Dependencies
    #       command: sudo apt-get update && sudo apt-get install -y libsndfile1
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt
      - run:
          name: Run tests
          command: pytest

  flake:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt
      - run:
          name: Flake8
          command: flake8 {{ cookiecutter.project_slug }} tests


  test_documentation_build:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>

    steps:
      - checkout
   #    - run:
   #        name: Install System Dependencies
   #        command: sudo apt-get update && sudo apt-get install -y libsndfile1 texlive-latex-extra dvipng
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt
      - run:
          name: Sphinx
          command: |
            pip install -e .
            cd docs/
            make html SPHINXOPTS="-W"

  test_pypi_publish:
    parameters:
      version:
        description: "version tag"
        default: "latest"
        type: string
    executor:
      name: python-docker
      version: <<parameters.version>>

    steps:
      - checkout
    #   - run:
    #       name: Install System Dependencies
    #       command: sudo apt-get update && sudo apt-get install -y libsndfile1
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: requirements_dev.txt
      - run:
          name: deploy
          command: |  # create whl, install twine and publish to Test PyPI
            python setup.py sdist bdist_wheel
            twine upload dist/*

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test: # Test workflow
    jobs:
      # Run tests for all python versions
      - build_and_test:
          matrix:
            parameters:
              version:
                - "3.8"
                - "3.9"
                - "3.10"
                - "3.11"
      - flake:
          matrix:
            parameters:
              version:
                - "3.9"
          requires:
            - build_and_test


      - test_documentation_build:
          matrix:
            parameters:
              version:
                - "3.9"
          requires:
            - build_and_test


{% if cookiecutter.use_pypi_deployment_with_ci == 'y' -%}
  test_and_publish:
    # Test and publish on new git version tags
    # This requires its own workflow to successfully trigger the test and build
    jobs:
      - build_and_test:
          matrix:
            parameters:
              version:
                - "3.8"
                - "3.9"
                - "3.10"
                - "3.11"
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - flake:
          matrix:
            parameters:
              version:
                - "3.9"
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - test_documentation_build:
          matrix:
            parameters:
              version:
                - "3.9"
          requires:
            - build_and_test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

      - test_pypi_publish:
          matrix:
            parameters:
              version:
                - "3.9"
          requires:
            - build_and_test
            - flake
            - test_documentation_build
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
{%- endif %}
